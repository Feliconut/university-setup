global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

def generate_greek_scheme():
	greek="ell,alpha,beta,chi,delta,epsilon,eta,gamma,iota,kappa,lambda,mu,nu,omega,phi,pi,psi,rho,sigma,tau,theta,upsilon,xi,zeta,Delta,Gamma,Lambda,Omega,Phi,Pi,Psi,Sigma,Theta,Upsilon,Xi,varepsilon,digamma,varphi,varpi,varrho,varsigma,vartheta"
	greeks=greek.split(',')
	single_complete="abcdegiklmnoprstuxzDGLOPSTUX"
	cd=dict()
	for l in single_complete:
                cd[l]=[w for w in greeks if w[0]==l][0]
	cd['e']='varepsilon'
	cd['p']='varphi'


	def greek_complete(prompt):
		if prompt.startswith(';'):
			if prompt[1] in cd:
				return '\\'+ cd[prompt[1]]
			return prompt
		else:
			if prompt in greeks:
				return '\\'+prompt
			else:
				return prompt
	return greek_complete	

greek_complete = generate_greek_scheme()

def create_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}\n"
        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

        snip.expand_anon(final_str)
endglobal


snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet # "Section" b
\section{$1}

$0
endsnippet

snippet ## "Subsection" b
\subsection{$1}

$0
endsnippet

snippet ### "Subsubsection" b
\subsubsection{$1}

$0
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "not math()"
snippet mk "Math" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

context "not math()"
snippet dm "Math" wA
\[
	${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '\b([A-NP-Za-np-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '\b([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

context "math()"
snippet == "iff ali" iA
&= $1 \\\\
endsnippet

context "math()"
snippet &= "toggle ali" i
&\iff$1
endsnippet

context "math()"
snippet &\iff "toggle ali" i
&\leq$1
endsnippet

context "math()"
snippet &\leq "toggle ali" i
&\geq$1
endsnippet

context "math()"
snippet &\geq "toggle ali" i
&=$1
endsnippet

context "math()"
snippet itt "\intertext" iA
\intertext{$1}$0
endsnippet

context "math()"
snippet != "not equal" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil ${1:${VISUAL}} \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor ${1:${VISUAL}} \right\rfloor$0
endsnippet

#snippet pmat "pmat" iA
#\begin{pmatrix} $1 \end{pmatrix} $0
#endsnippet

#snippet bmat "bmat" iA
#\begin{bmatrix} $1 \end{bmatrix} $0
#endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet [] "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet <> "langle rangle" iA
\left\langle ${1:${VISUAL}} \right\rangle $0
endsnippet

context "math()"
snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr( "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

context "math()"
snippet lr| "left| right|" iA
\left| ${1:${VISUAL}} \right| $0
endsnippet

context "math()"
snippet lr{ "left\{ right\}" iA
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

context "math()"
snippet lr[ "left[ right]" iA
\left[ ${1:${VISUAL}} \right] $0
endsnippet

context "math()"
snippet lra "leftangle rightangle" iA
\left\langle${1:${VISUAL}} \right\rangle$0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{${1:n}=${2:1}}^{${3:\infty}} ${4:a_$1 z^$1}
endsnippet

#snippet taylor "taylor" w
#\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
#endsnippet

context "math()"
snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

context "math()"
snippet liminf "liminf" w
\liminf{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

context "math()"
snippet dif "d/dx" wA
\frac{d ${1:}}{d ${2:x}} $0
endsnippet

context "math()"
snippet sr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

#context "math()"
#snippet sq "^2" iA
#^2
#endsnippet

#context "math()"
#snippet cb "^3" iA
#^3
#endsnippet

context "math()"
snippet ^^ "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet


context "math()"
snippet seq "sequence" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

context "math()"
snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "exists" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet LN "logical not" iA
\lnot
endsnippet
context "math()"
snippet LL "logical not" iA
\lnot
endsnippet

context "math()"
snippet LO "logical or" iA
\lor
endsnippet
context "math()"
snippet LU "logical or" iA
\lor
endsnippet

context "math()"
snippet LA "logical and" iA
\land 
endsnippet

context "math()"
snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

#snippet nn "Tikz node" w
#\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
#$0
#endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`\left($1 \right) $0
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(sup|inf|infty|arcsin|arccos|arctan|arccot|arccsc|arcsec|int|nabla|iff)' "math cmd" rwA
\\`!p snip.rv = match.group(1)` $0
endsnippet


priority 200
context "math()"
snippet '(?<!\\)(Re|Im|cis|arg|Arg|Log|sh|ch|deg|rank|ker|coker|Ker|Coker|Pr|char|dim|null|Var|Cov|Hom|End)' "operators" rw
\\operatorname{`!p snip.rv = match.group(1)`} $0
endsnippet

context "math()"
snippet op "operatorname" wi
\operatorname{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet oo "\infty" i
\infty
endsnippet

priority 100
context "math()"
snippet "0o|o0" "infty" riA
\infty 
endsnippet


priority 100
context "math()"
snippet ooo "infty" iA
\infty 
endsnippet

priority 200
context "math()"
snippet "o0-|o-0|0o-|0-o|-o0|-0o" "to infty" riA
\to \infty 
endsnippet



priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

priority 100
context "math()"
snippet -< "gets" iA
\gets 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet :> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet "([A-Za-z]|\\[a-z]+)(comp)" "complement" iwrA
`!p snip.rv=match.group(1)`^{c} $0
endsnippet

context "math()"
snippet "([A-Za-z]|\\[a-z]+)(--|inv)" "inverse" iwrA
`!p snip.rv=match.group(1)`^{-1} $0
endsnippet

context "math()"
snippet "([A-Za-z]|\\[a-z]+)(dag|dg)" "dagger" iwrA
`!p snip.rv=match.group(1)`^{\dag} $0
endsnippet

context "math()"
snippet \ "setminus" i
\setminus 
endsnippet

context "math()"
snippet >> ">>" iA
\gg
endsnippet

context "math()"
snippet << "<<" iA
\ll
endsnippet


context "math()"
snippet ~~ "~" iA
\sim $0
endsnippet
context "math()"
snippet ~= "~=" iA
\simeq $0
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet || "mid" iA
\mid $0
endsnippet


context "math()"
snippet cc "subset" Ai
\subset $0
endsnippet

context "math()"
snippet nin "not in " iA
\not\in $0
endsnippet

context "math()"
snippet inn "in " iA
\in $0
endsnippet

context "math()"
snippet nn "cap" iwA
\cap $0
endsnippet
context "math()"
snippet \cap "bigcap" i
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet uu "cup" iwA
\cup $0
endsnippet
context "math()"
snippet \cup "bigcup" i
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet ww "wedge" iwA
\wedge $0
endsnippet
context "math()"
snippet \wedge "bigwedge" i
\bigwedge_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet vv "vee" iwA
\vee $0
endsnippet
context "math()"
snippet \vee "bigvee" i
\bigvee_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet O. "odot" iwA
\odot $0
endsnippet
context "math()"
snippet \odot "big odot" i
\bigodot_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet Ox "odot" iwA
\otimes $0
endsnippet
context "math()"
snippet \otimes "big otimes" i
\bigotimes_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet O+ "oplus" iwA
\oplus $0
endsnippet
context "math()"
snippet \oplus "big oplus" i
\bigoplus_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet part "partial" iwA
\partial
endsnippet

context "math()"
snippet \partial "big partial differentiation" i
\frac{\partial ${1:}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet O\ "emptyset" iA
\emptyset $0
endsnippet

context "math()"
snippet <| "normal" iA
\triangleleft $0
endsnippet

context "math()"
snippet |> "normal" iA
\triangleright $0
endsnippet

#context "math()"
#snippet <> "diamond" iA
#\diamond $0
#endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet ee "exp" iA
e^{$1} $0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

#"snippet SI "SI" iA
#"\SI{$1}{$2}
#"endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{${1:${VISUAL}}} $0
endsnippet

priority 100
context "math()"
snippet "(\\[a-z]+|[a-zA-Z])bar" "bar" wriA
\overline{`!p snip.rv=match.group(1)`} $0
endsnippet

priority 10
context "math()"
snippet "hat" "hat" wriA
\hat{${1:${VISUAL}}} $0
endsnippet

priority 100
context "math()"
snippet "(\\[a-z]+|[a-zA-Z])hat" "hat" wriA
\hat{`!p snip.rv=match.group(1)`} $0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{${1:${VISUAL}}} $0
endsnippet

priority 100
context "math()"
snippet "(\\[a-z]+|[a-zA-Z])conj" "conjugate" wriA
\overline{`!p snip.rv=match.group(1)`} $0
endsnippet

context "not math()"
snippet bf "textbf" i
\textbf{${1:${VISUAL}}}$0
endsnippet
priority 100
context "math()"
snippet "([0-9a-zA-Z])bf" "mathbf" riA
\mathbf{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([0-9a-zA-Z])bb" "mathbb" riA
\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

context "not math()"
snippet it "textit" i
\textit{${1:${VISUAL}}}$0
endsnippet

context "not math()"
snippet sf "textsf" i
\textbf{${1:${VISUAL}}}$0
endsnippet
priority 100 
context "math()" 
snippet "([a-zA-Z])sf" "mathsf" riA
\mathsf{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])cal" "mathcal" rA
\mathcal{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])scr" "mathscr" rA
\mathscr{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet "(\\[a-zA-Z][a-z]+|[a-zA-Z])(\.\.|dot)" "dot" wrA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

priority 100
context "math()"
snippet dot "dot" wiA
\dot{`!p snip.rv=match.group(1)`}
endsnippet

# toggle dots
priority 100
context "math()"
snippet "\\dot\{(\\[a-zA-Z][a-z]+|[a-zA-Z])\}" "dot to ddot" wri
\ddot{`!p snip.rv=match.group(1)`} $0
endsnippet

priority 100
context "math()"
snippet "\\ddot\{(\\[a-zA-Z][a-z]+|[a-zA-Z])\}" "ddot to dddot" wri
\dddot{`!p snip.rv=match.group(1)`} $0
endsnippet

priority 100
context "math()"
snippet "\\dddot\{(\\[a-z]+|[a-zA-Z])\}" "dddot to ddddot" wri
\ddddot{`!p snip.rv=match.group(1)`} $0
endsnippet

priority 1
context "math()"
snippet "(\b(?<!\\)[a-z]{2,}|;[A-Za-z])" "greek letters" wrA
`!p
l=match.group(1)
snip.rv=greek_complete(l) 
`
endsnippet

priority 21
context "math()"
snippet "(Z|Q|R|N|H|D|C){2}" "fields" wrA
\mathbb{`!p snip.rv=match.group(1)`}
endsnippet

#priority 21
#context "math()"
#snippet "([A-Zx-z])([ijkmnt])" "common subscript" wrA
#`!p snip.rv=match.group(1)`_{`!p snip.rv=match.group(2)`}
#endsnippet

context "not math()"
snippet proof "solution env" bA
\begin{proof}
$1
\end{proof}
$0
endsnippet

context "not math()"
snippet pf "solution env" b
\begin{proof}
	$1
\end{proof}
$0
endsnippet

context "not math()"
snippet sol "solution env" bA
\begin{proof}[${1:Solution}]
	$2
\end{proof}
$0
endsnippet

context "math()"
snippet div "divergence" wi
\nabla \cdot $0
endsnippet

context "math()"
snippet grad "grad" wi
\nabla  $0
endsnippet

context "math()"
snippet curl "curl" wi
\nabla \times $0
endsnippet

context "math()"
snippet ,. "vector" wiA
\vec{$1} $0
endsnippet
context "math()"
snippet "(\\[a-z]+|[a-zA-Z]),\." "vector" wriA
\vec{`!p snip.rv=match.group(1)`} $0
endsnippet

context "math()"
snippet +- "pm" wiA
\pm $0
endsnippet

pre_expand "create_matrix(snip)"
context "math()"
snippet "(small|[bBpvV])?mat(rix)?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet

context "math()"
snippet bra "bra" wiA
\left\langle $1 \right| $0
endsnippet

context "math()"
snippet ket "ket" wiA
\left| $1 \right\rangle $0
endsnippet

context "math()"
snippet bk "braket" wiA
\left\langle $1 \middle| $2 \right\rangle $0
endsnippet
# vim:ft=snippets
